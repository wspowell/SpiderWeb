package servertest

import (
	"net/http"

	"github.com/stretchr/testify/mock"
	"github.com/wspowell/context"
	"github.com/wspowell/log"
	"github.com/wspowell/spiderweb/profiling"
)

type datastore interface {
	RetrieveValue() string
}

type database struct{}

func (self *database) RetrieveValue() string {
	return "invalid"
}

// Datastore is an autogenerated mock type for the Datastore type
type mockDatastore struct {
	mock.Mock
}

// RetreiveValue provides a mock function with given fields:
func (_m *mockDatastore) RetrieveValue() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type fooResponseModel struct {
	MyString string `json:"output_string"`
	MyInt    int    `json:"output_int"`
}

type get struct {
	Test         string
	Db           datastore         `spiderweb:"resource=datastore"`
	ResourceId   int               `spiderweb:"path=id"`
	ResponseBody *fooResponseModel `spiderweb:"response,mime=application/json,validate"`
}

func (self *get) Handle(ctx context.Context) (int, error) {
	defer profiling.Profile(ctx, "GetResource").Finish()
	log.Debug(ctx, "handling GetResource")

	log.Info(ctx, "resource id: %v", self.ResourceId)

	self.ResponseBody = &fooResponseModel{
		MyString: self.Db.RetrieveValue(),
		MyInt:    self.ResourceId,
	}

	return http.StatusOK, nil
}
